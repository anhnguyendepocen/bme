alpha <- (1 - conf.level)/2
CINT <- exp(log(SRR) + c(-1,1) * qnorm(1 - alpha) * sqrt(varlogSRR))
list("Standardize rate ratio" = SRR, "95% CI for SRR" = CINT,
"Crude rate ratio" = CRR,
"directly standardized death rate" = Ras)
}
with(schizophrenia, std.rate.ratio(count = cohort.deaths, pop = cohort.py,
stdcount = alberta.deaths, stdpop = alberta.pop))
library(bme)
with(schizophrenia, std.rate.ratio(count = cohort.deaths, pop = cohort.py,
stdcount = alberta.deaths, stdpop = alberta.pop))
devtools::document()
devtools::document()
library(bme)
source('C:/Users/clayford/Dropbox/_statistics/bme/R/std-rate-ratio.R')
devtools::document()
library(bme)
devtools::document()
library(bme)
devtools::document()
library(bme)
library(bme)
str(schizophrenia)
sum(schizophrenia$cohort.deaths)
Rsk <- schizophrenia$alberta.deaths/schizophrenia$alberta.pop
Da <- sum(schizophrenia$cohort.deaths)
Da/Nsk
Nak <- schizophrenia$cohort.py
Ea <- sum(Rsk*Nak)
SMR <- Da/Ea
varSMR <- SMR/Ea
SMR + c(-1,1)*qnorm(0.975)*sqrt(varSMR)
library(epitools)
ageadjust.indirect(count = schizophrenia$cohort.deaths, pop = schizophrenia$cohort.py, stdcount = schizophrenia$alberta.deaths, stdpop = schizophrenia$alberta.pop)
STATISTIC <- ((Da - Ea)^2)/Ea
devtools::load_all()
exact.rate.test(time = Ea, status = Da)
exact.rate.test(time = 2, status = 0.376)
exact.rate.test(time = 0.376, status = 2)
devtools::load_all()
exact.rate.test(time = 0.376, status = 2)
devtools::document()
library(bme)
devtools::document()
library(bme)
str(exact.rate.test(time = Ea, status = Da))
devtools::load_all()
str(exact.rate.test(time = Ea, status = Da))
exact.rate.test(time = Ea, status = Da)$conf.int
library(bme)
schizophrenia
library(reshape2)
schizL <- melt(schizophrenia, id.vars = "age.group")
View(schizL)
head(breast)
head(breast.survival)
schizL <- melt(schizophrenia, id.vars = c("age.group","cohort.deaths"))
View(schizL)
schizophrenia[,1:3]
schizophrenia[,c(1,4,5)]
rbind(schizophrenia[,1:3], schizophrenia[,c(1,4,5)])
top <- schizophrenia[,1:3]
bot <- schizophrenia[,c(1,4,5)]
names(top) <- names(bot) <- c("age.group","deaths","pop")
dat <- rbind(top,bot)
dat
top <- schizophrenia[,1:3]
top$exp <- 1
bot <- schizophrenia[,c(1,4,5)]
bot$exp <- 2
names(top) <- names(bot) <- c("age.group","deaths","pop", "exp")
dat <- rbind(top,bot)
dat
52.49-34.99
females <- matrix(c(1.4, 0.9, 0.9, 0.7, 0.6,
3.2, 2.1, 2.1, 1.6, 1.2,
6.6, 5.3, 4.9, 4.2, 3.4,
16.1, 13.4, 11.2, 9.8, 8.4,
42.8, 35.1, 29.4, 24.9, 21.5),
ncol=5)
dimnames(females) <- list("Year" = seq(1950, 1990, 10),
"Age Group" = c("30-34","40-44", "50-54", "60-64","70-74"))
females
hel(matplot)
help(matplot)
rownames(females)
plot(as.integer(rownames(females)), females[,1])
plot(as.integer(rownames(females)), females[,1], type="b")
plot(as.integer(rownames(females)), females[,1] * 1e5, type="b")
females[,1] * 1e5
plot(as.integer(rownames(females)), females[,1], type="b", ylim = c(0,50))
plot(as.integer(rownames(females)), females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)")
plot(as.integer(rownames(females)), females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Year")
year <- as.integer(rownames(females))
plot(year, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Year")
lines(year, females[,2], type = "b", pch = 2)
lines(year, females[,3], type = "b", pch = 3)
lines(year, females[,4], type = "b", pch = 4)
lines(year, females[,5], type = "b", pch = 5)
legend("topright", legend = colnames(females), pch = 1:5)
help(legend)
plot(year, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Year")
lines(year, females[,2], type = "b", pch = 2)
lines(year, females[,3], type = "b", pch = 3)
lines(year, females[,4], type = "b", pch = 4)
lines(year, females[,5], type = "b", pch = 5)
legend("topright", legend = colnames(females), pch = 1:5, title = "Age group")
colnames(females)
ag <- colnames(females)
plot(ag, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group")
ag <- factor(colnames(females))
plot(ag, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group")
ag <- unclass(factor(colnames(females)))
plot(ag, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group")
plot(ag, females[,1], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
plot(ag, females[1,], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
lines(ag, females[2,], type = "b", pch = 2)
lines(ag, females[3,], type = "b", pch = 3)
lines(ag, females[4,], type = "b", pch = 4)
lines(ag, females[5,], type = "b", pch = 5)
legend("topright", legend = rownames(females), pch = 1:5, title = "Time period")
plot(ag, females[1,], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
lines(ag, females[2,], type = "b", pch = 2)
lines(ag, females[3,], type = "b", pch = 3)
lines(ag, females[4,], type = "b", pch = 4)
lines(ag, females[5,], type = "b", pch = 5)
legend("topleft", legend = rownames(females), pch = 1:5, title = "Time period")
help(axes)
help(axis)
axis(1, at=1:5, labels = colnames(females))
axis(2, at=seq(0,50,10), labels = seq(0,50,10))
help("legend")
plot(ag, females[1,], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
lines(ag, females[2,], type = "b", pch = 2)
lines(ag, females[3,], type = "b", pch = 3)
lines(ag, females[4,], type = "b", pch = 4)
lines(ag, females[5,], type = "b", pch = 5)
legend("top", legend = rownames(females), pch = 1:5, title = "Time period")
axis(1, at=1:5, labels = colnames(females))
axis(2, at=seq(0,50,10), labels = seq(0,50,10))
help("diag")
diag(females[3:5,1:3])
diag(females[1:3,3:5])
pmin(nrow(females) - 1, ncol(females) - 3)
k <- pmin(nrow(females) - 1, ncol(females) - 3)
diag(females[1:(1 + k),3:(3 + k)])
getDiag <- function(m,i,j){
k <- pmin(nrow(m) - i, ncol(m) - j)
diag(females[i:(i + k),j:(j + k)])
}
getDiag(females,1,3)
i <- c(3,2,1,1,1)
j <- c(1,1,1,2,3)
mapply(getDiag,females,i,j)
mapply(getDiag,m=females,i=i,j=j)
help(mapply)
getDiag(females,i,j)
debugonce(getDiag)
getDiag(females,i,j)
getDiag <- function(m,i,j){
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
}
}
getDiag(females,i,j)
getDiag <- function(m,i,j){
out <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
out[n] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
}
out
}
getDiag(females,i,j)
help("list")
getDiag <- function(m,i,j){
out <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
out[[n]] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
}
out
}
getDiag(females,i,j)
dr <- getDiag(females,i,j)
plot(ag, dr[[1]], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
length(diag(4))
sqrt(length(diag(4)))
getDiag <- function(m,i,j){
x <- vector(mode = "list", length = length(i))
y <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
y[[n]] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
x[[n]] <- j:(j+k)
}
return(x,y)
}
dr <- getDiag(females,i,j)
getDiag <- function(m,i,j){
x <- vector(mode = "list", length = length(i))
y <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
y[[n]] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
x[[n]] <- j[n]:(j[n] + k[n])
}
return(x,y)
}
dr <- getDiag(females,i,j)
getDiag <- function(m,i,j){
x <- vector(mode = "list", length = length(i))
y <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
y[[n]] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
x[[n]] <- j[n]:(j[n] + k[n])
}
list(x,y)
}
i <- c(3,2,1,1,1)
j <- c(1,1,1,2,3)
dr <- getDiag(females,i,j)
dr
getDiag <- function(m,i,j){
x <- vector(mode = "list", length = length(i))
y <- vector(mode = "list", length = length(i))
k <- pmin(nrow(m) - i, ncol(m) - j)
for(n in seq_along(i)){
y[[n]] <- diag(m[i[n]:(i[n] + k[n]),j[n]:(j[n] + k[n])])
x[[n]] <- j[n]:(j[n] + k[n])
}
c(x,y)
}
dr <- getDiag(females,i,j)
dr
plot(dr[[1]], dr[[6]], type="b", ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
plot(dr[[1]], dr[[6]], type="b", xlim = c(1,5), ylim = c(0,50),
ylab = "Death Rate (per 100,000)", xlab="Age group", axes=F)
lines(dr[[2]], dr[[7]], type="b", pch=2)
lines(dr[[3]], dr[[8]], type="b", pch=3)
lines(dr[[4]], dr[[9]], type="b", pch=4)
lines(dr[[5]], dr[[10]], type="b", pch=5)
axis(1, at=1:5, labels = colnames(females))
axis(2, at=seq(0,50,10), labels = seq(0,50,10))
legend("top", legend = seq(1930,1970,10), pch = 1:5, title = "Birth Cohort")
rm(getDiag)
devtools::document()
save(females, file = "data/females.rda")
devtools::document()
library(bme)
devtools::document()
library(bme)
devtools::document()
library(bme)
black <- c(119,16,2,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
rep(0:6,each=black)
rep(0:6,times=black)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- c(rep("black", sum(black)), rep("white", sum(white)))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))))
victim <- data.frame(resp, race)
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))))
victim <- data.frame(resp, race)
aggregate(resp ~ race, data=victim, mean)
table(race)
with(victim, tapply(resp, race, mean))
with(victim, tapply(resp, race, var))
pGLM <- glm(resp ~ race, data=victim, family = poisson)
summary(pGLM)
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))),
levels = c("white","black"))
victim <- data.frame(resp, race)
table(race)
with(victim, tapply(resp, race, mean))
with(victim, tapply(resp, race, var))
pGLM <- glm(resp ~ race, data=victim, family = poisson)
summary(pGLM)
coef(pGLM)
crossprod(coef(pGLM), c(1,1))
exp(crossprod(coef(pGLM), c(1,1)))
exp(crossprod(coef(pGLM), c(1,0)))
coef(pGLM)[2]
exp(coef(pGLM)[2])
exp(coef(pGLM)[2])
mean(victim$resp[victim$race=="black"])/mean(victim$resp[victim$race=="white"])
library(MASS)
nbGLM <- glm.nb(resp ~ race, data=vicitim)
nbGLM <- glm.nb(resp ~ race, data=victim)
summary(nbGLM)
nbGLM$theta
1/nbGLM$theta
predict(pGLM, newdata = data.frame(race = c("white","black")))
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
dpois(0:6,lambda = fmeans[1])
fit <- predict(pGLM, type = "response")
mu <- predict(pGLM, type = "response")
sum(dpois(x = 0, lambda = mu))
dpois(0:6,lambda = fmeans[1]) * 1308
fmeans[1]
sum(victim$race=="white")
dpois(0:6,lambda = fmeans[1]) * sum(victim$race=="white")
fittedW <- dpois(0:6,lambda = fmeans[1]) * sum(victim$race=="white")
fittedB <- dpois(0:6,lambda = fmeans[2]) * sum(victim$race=="black")
round(cbind(fittedB, fittedW),1)
round(cbind(Black=fittedB, White=fittedW),1)
round(cbind(Black=fittedB, White=fittedW, deparse.level = 1),1)
round(cbind(Black=fittedB, White=fittedW, deparse.level = 2),1)
help(cbind)
data.frame(Response=0:6,Black=round(fittedB,1), White=round(fittedW,1))
data.frame(Response=0:6,BlackObs=black, BlackFit=round(fittedB,1),
WhiteObs=white, WhiteFit=round(fittedW,1), )
data.frame(Response=0:6,BlackObs=black, BlackFit=round(fittedB,1),
WhiteObs=white, WhiteFit=round(fittedW,1))
countreg::rootogram(pGLM)
summary(nbGLM)
summary(pGLM)
predict(nbGLM, newdata = data.frame(race = c("white","black")))
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
summary(nbGLM)
dnbinom(x = 0:6, size = 1/nbGLM$theta, mu = fmeans[1])
dnbinom(x = 0:6, size = 1/nbGLM$theta, mu = fmeans[1]) * sum(victim$race=="white")
dnbinom(x = 0:6, size = nbGLM$theta, mu = fmeans[1]) * sum(victim$race=="white")
fittedW <- dnbinom(x = 0:6, size = nbGLM$theta, mu = fmeans[1]) * sum(victim$race=="white")
fittedB <- dnbinom(x = 0:6, size = nbGLM$theta, mu = fmeans[2]) * sum(victim$race=="black")
data.frame(Response=0:6,BlackObs=black, BlackFit=round(fittedB,1),
WhiteObs=white, WhiteFit=round(fittedW,1))
summary(pGLM)
summary(nbGLM)
summary(nbGLM)$coefficients
summary(nbGLM)$coefficients["raceblack","Std. Error"]
SE <- summary(nbGLM)$coefficients["raceblack","Std. Error"]
exp(coef(nbGLM)[2] + c(-1,1) * qnorm(0.975) * SE)
SE <- summary(pGLM)$coefficients["raceblack","Std. Error"]
exp(coef(pGLM)[2] + c(-1,1) * qnorm(0.975) * SE)
exp(crossprod(coef(pGLM), c(1,1)))
exp(crossprod(coef(pGLM), c(1,0)))
exp(predict(pGLM, newdata = c("white","black")))
exp(predict(pGLM, newdata = data.frame(race=c("white","black"))))
fmeans
fmeans + fmeans^2 * (1/nbGLM$theta)
with(victim, tapply(resp, race, var))
countreg::rootogram(nbGLM)
help(glm)
pGLMi <- glm(resp ~ race, data=victim, family = poisson(link = "identity"))
summary(pGLMi)
nbGLMi <- glm.nb(resp ~ race, data=victim, link = "identity")
summary(nbGLMi)
summary(nbGLM)
library(magrittr)
rpois(n = 500, lambda = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 1, mu = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 1, mu = 3) %>% table() %>%  barplot()
rpois(n = 500, lambda = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 0.0001, mu = 3) %>% table() %>%  barplot()
rpois(n = 500, lambda = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 0.01, mu = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 20, mu = 3) %>% table() %>%  barplot()
rpois(n = 500, lambda = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 20, mu = 3) %>% table() %>%  barplot()
rpois(n = 500, lambda = 3) %>% table() %>%  barplot()
rnbinom(n = 500, size = 500, mu = 3) %>% table() %>%  barplot()
victim$resp %>% plot(type = "h")
victim$resp %>% hist()
victim$resp %>% barplot()
victim$resp %>% table() %>% barplot()
summary(nbGLM)
victim$resp %>% `[`(victim$race=="white") %>% table() %>% barplot()
coef(nbGLM)[2]
rnbinom(n = 1308, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>% table() %>%  barplot()
table(victim$race)
victim$resp %>% `[`(victim$race=="white") %>% table() %>% barplot()
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>% table() %>%  barplot()
victim$resp %>% `[`(victim$race=="black") %>% table() %>% barplot()
victim$resp %>% `[`(victim$race=="black") %>% table() %>% barplot()
rnbinom(n = 159, size = nbGLM$theta, mu = exp(sum(coef(nbGLM)))) %>% table() %>%  barplot()
dpois(x = 3, lambda = 3)
plot(0:20, dpois(x = 0:20, lambda = 3), type = "h")
plot(0:10, dpois(x = 0:10, lambda = 3), type = "h", xlab="count", ylab="probability")
help(plot.lm)
# Table 13.6
# Agresti, p. 561
# 13.4.3 - Frequency of Knowing Homicide Victims
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))),
levels = c("white","black"))
victim <- data.frame(resp, race)
table(race)
with(victim, tapply(resp, race, mean))
with(victim, tapply(resp, race, var))
table(resp, race)
table(resp, race)
# Poisson model
pGLM <- glm(resp ~ race, data=victim, family = poisson)
summary(pGLM)
exp(coef(pGLM)[2])
exp(coef(pGLM)[2])
mean(victim$resp[victim$race=="black"])/mean(victim$resp[victim$race=="white"])
exp(coef(pGLM)[2])
# same thing
mean(victim$resp[victim$race=="black"])/mean(victim$resp[victim$race=="white"])
exp(predict(pGLM, newdata = data.frame(race=c("white","black"))))
with(victim, tapply(resp, race, mean))
exp(predict(pGLM, newdata = data.frame(race=c("white","black"))))
# same thing
with(victim, tapply(resp, race, mean))
predict(pGLM, newdata = data.frame(race = c("white","black")))
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
fittedW <- dpois(0:6,lambda = fmeans[1]) * sum(victim$race=="white")
fittedB <- dpois(0:6,lambda = fmeans[2]) * sum(victim$race=="black")
data.frame(Response=0:6,BlackObs=black, BlackFit=round(fittedB,1),
WhiteObs=white, WhiteFit=round(fittedW,1))
# fitted counts for Poisson GLM:
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
fittedW <- dpois(0:6,lambda = fmeans[1]) * sum(victim$race=="white")
fittedB <- dpois(0:6,lambda = fmeans[2]) * sum(victim$race=="black")
data.frame(Response=0:6,BlackObs=black, BlackFit=round(fittedB,1),
WhiteObs=white, WhiteFit=round(fittedW,1))
# Fit a negative binomial model
library(MASS)
nbGLM <- glm.nb(resp ~ race, data=victim)
summary(nbGLM)
# fitted counts for Negative Binomial GLM:
predict(nbGLM, newdata = data.frame(race = c("white","black")))
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans # same as pGLM
# fitted counts for Negative Binomial GLM:
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans # same as pGLM
nbGLM$theta
fmeans + fmeans^2 * (1/nbGLM$theta)
countreg::rootogram(pGLM)
countreg::rootogram(nbGLM)
library(magrittr) # for %>% operator
par(mfrow=c(1,2))
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot()
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot()
help("barplot")
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot(main = "Observed")
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot(main = "Simulated")
set.seed(1)
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot(main = "Observed")
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot(main = "Simulated")
# black
victim$resp %>% `[`(victim$race=="black") %>%
table() %>% barplot(main = "Observed")
rnbinom(n = 159, size = nbGLM$theta, mu = exp(sum(coef(nbGLM)))) %>%
table() %>%  barplot(main = "Simulated")
set.seed(111)
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot(main = "Observed White")
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot(main = "Simulated White")
# black
victim$resp %>% `[`(victim$race=="black") %>%
table() %>% barplot(main = "Observed Black")
rnbinom(n = 159, size = nbGLM$theta, mu = exp(sum(coef(nbGLM)))) %>%
table() %>%  barplot(main = "Simulated Black")
set.seed(1)
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot(main = "Observed White")
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot(main = "Simulated White")
# black
victim$resp %>% `[`(victim$race=="black") %>%
table() %>% barplot(main = "Observed Black")
rnbinom(n = 159, size = nbGLM$theta, mu = exp(sum(coef(nbGLM)))) %>%
table() %>%  barplot(main = "Simulated Black")
par(op)
library(magrittr) # for %>% operator
op <- par(mfrow=c(1,2))
set.seed(1)
victim$resp %>% `[`(victim$race=="white") %>%
table() %>% barplot(main = "Observed White")
rnbinom(n = 1149, size = nbGLM$theta, mu = exp(coef(nbGLM)[1])) %>%
table() %>%  barplot(main = "Simulated White")
# black
victim$resp %>% `[`(victim$race=="black") %>%
table() %>% barplot(main = "Observed Black")
rnbinom(n = 159, size = nbGLM$theta, mu = exp(sum(coef(nbGLM)))) %>%
table() %>%  barplot(main = "Simulated Black")
par(op)
